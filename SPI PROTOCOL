rtl:

module spi_moore (
    input wire clk,
    input wire rst,
    input wire ss,            // Slave Select (active low)
    input wire [7:0] data_in, // Data to be transmitted
    output reg mosi,          // Master Out Slave In
    input wire miso,          // Master In Slave Out
    output reg sclk,          // Serial Clock
    output reg [7:0] data_out,// Received data
    output reg done           // Transfer complete
);

    // State encoding
    parameter IDLE     = 2'b00;
    parameter LOAD     = 2'b01;
    parameter TRANSFER = 2'b10;
    parameter DONE     = 2'b11;

    reg [1:0] state, next_state;

    // Internal signals
    reg [7:0] shift_reg;
    reg [2:0] bit_count;

    // State transition logic (Moore FSM)
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (!ss) begin
                    next_state = LOAD;
                end else begin
                    next_state = IDLE;
                end
            end
            LOAD: begin
                next_state = TRANSFER;
            end
            TRANSFER: begin
                if (bit_count == 3'b111 && sclk) begin
                    next_state = DONE;
                end else begin
                    next_state = TRANSFER;
                end
            end
            DONE: begin
                if (ss) begin
                    next_state = IDLE;
                end else begin
                    next_state = DONE;
                end
            end
            default: next_state = IDLE;
        endcase
    end

    // Output logic and internal state updates
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            mosi <= 1'b0;
            sclk <= 1'b0;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
            data_out <= 8'b0;
            done <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    done <= 1'b0;
                    sclk <= 1'b0;
                end
                LOAD: begin
                    shift_reg <= data_in;
                    bit_count <= 3'b0;
                    sclk <= 1'b0;
                end
                TRANSFER: begin
                    sclk <= ~sclk; // Toggle clock
                    if (sclk) begin
                        mosi <= shift_reg[7];
                        shift_reg <= {shift_reg[6:0], miso};
                        bit_count <= bit_count + 1;
                    end
                end
                DONE: begin
                    data_out <= shift_reg;
                    done <= 1'b1;
                end
            endcase
        end
    end

endmodule


Tb:

module tb_spi_moore;
    // Testbench signals
    reg clk;
    reg rst;
    reg ss;
    reg [7:0] data_in;
    wire mosi;
    reg miso;
    wire sclk;
    wire [7:0] data_out;
    wire done;

   // reg [7:0] expected_data;

    // Instantiate the SPI module
    spi_moore uut (
        .clk(clk),
        .rst(rst),
        .ss(ss),
        .data_in(data_in),
        .mosi(mosi),
        .miso(miso),
        .sclk(sclk),
        .data_out(data_out),
        .done(done)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns period clock
    end

    // Test sequence
    initial begin
        // Initialize inputs
        rst = 1;
        ss = 1;
        miso = 0;
        data_in = 8'b0;

        // Apply reset
        #10;
        rst = 0;

        // Test multiple cases using a for loop
        for (integer i = 0; i < 8; i = i + 1) begin
            data_in = 8'hA5 + i; // Example data to send
           

            // Bring ss low to start communication
            #20;
            ss = 0;

            // Provide data on MISO line
            for (integer bit_index = 0; bit_index < 8; bit_index = bit_index + 1) begin
                @(posedge sclk);
                miso <= data_in[7 - bit_index]; // Sending MSB first
            end

            // Wait for transfer to complete
            wait (done);

            // Check results
            #10;
            $display("Test %0d: Data sent: 0x%h, Data received: 0x%h", i, data_in, data_out);
            // Bring ss high to end communication
            ss = 1;
            #20;
        end

        // End simulation
        #50;
        $finish;
    end

    // Monitor the SPI signals for debugging
    initial begin
        $monitor("Time: %0t, clk: %b, rst: %b, ss: %b, data_in: 0x%h, mosi: %b, miso: %b, sclk: %b, data_out: 0x%h, done: %b",
                 $time, clk, rst, ss, data_in, mosi, miso, sclk, data_out, done);
    end
endmodule

